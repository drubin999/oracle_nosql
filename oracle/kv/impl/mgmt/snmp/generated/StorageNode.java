package oracle.kv.impl.mgmt.snmp.generated;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling OracleNosqlMIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.*;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "StorageNode" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.111.42.1.
 */
@SuppressWarnings({"serial","unused"})
public class StorageNode implements StorageNodeMBean, Serializable {

    /**
     * Variable for storing the value of "SnAdminHttpPort".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.9".
     */
    protected Integer SnAdminHttpPort = new Integer(1);

    /**
     * Variable for storing the value of "SnRootDirPath".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.8".
     */
    protected String SnRootDirPath = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnStoreName".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.7".
     */
    protected String SnStoreName = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnHaPortRange".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.6".
     */
    protected String SnHaPortRange = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnCPUs".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.15".
     */
    protected Integer SnCPUs = new Integer(1);

    /**
     * Variable for storing the value of "SnHAHostname".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.5".
     */
    protected String SnHAHostname = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnMemory".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.14".
     */
    protected Integer SnMemory = new Integer(1);

    /**
     * Variable for storing the value of "SnMountPoints".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.13".
     */
    protected String SnMountPoints = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnRegistryPort".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.4".
     */
    protected Integer SnRegistryPort = new Integer(1);

    /**
     * Variable for storing the value of "SnHostname".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.3".
     */
    protected String SnHostname = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SnCapacity".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.12".
     */
    protected Integer SnCapacity = new Integer(1);

    /**
     * Variable for storing the value of "SnServiceStatus".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.2".
     */
    protected EnumSnServiceStatus SnServiceStatus = new EnumSnServiceStatus();

    /**
     * Variable for storing the value of "SnLogFileLimit".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.11".
     */
    protected Integer SnLogFileLimit = new Integer(1);

    /**
     * Variable for storing the value of "SnLogFileCount".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.10".
     */
    protected Integer SnLogFileCount = new Integer(1);

    /**
     * Variable for storing the value of "SnId".
     * The variable is identified by: "1.3.6.1.4.1.111.42.1.1".
     */
    protected Integer SnId = new Integer(1);


    /**
     * Constructor for the "StorageNode" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public StorageNode(SnmpMib myMib) {
    }


    /**
     * Constructor for the "StorageNode" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public StorageNode(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "SnAdminHttpPort" variable.
     */
    @Override
    public Integer getSnAdminHttpPort() throws SnmpStatusException {
        return SnAdminHttpPort;
    }

    /**
     * Getter for the "SnRootDirPath" variable.
     */
    @Override
    public String getSnRootDirPath() throws SnmpStatusException {
        return SnRootDirPath;
    }

    /**
     * Getter for the "SnStoreName" variable.
     */
    @Override
    public String getSnStoreName() throws SnmpStatusException {
        return SnStoreName;
    }

    /**
     * Getter for the "SnHaPortRange" variable.
     */
    @Override
    public String getSnHaPortRange() throws SnmpStatusException {
        return SnHaPortRange;
    }

    /**
     * Getter for the "SnCPUs" variable.
     */
    @Override
    public Integer getSnCPUs() throws SnmpStatusException {
        return SnCPUs;
    }

    /**
     * Getter for the "SnHAHostname" variable.
     */
    @Override
    public String getSnHAHostname() throws SnmpStatusException {
        return SnHAHostname;
    }

    /**
     * Getter for the "SnMemory" variable.
     */
    @Override
    public Integer getSnMemory() throws SnmpStatusException {
        return SnMemory;
    }

    /**
     * Getter for the "SnMountPoints" variable.
     */
    @Override
    public String getSnMountPoints() throws SnmpStatusException {
        return SnMountPoints;
    }

    /**
     * Getter for the "SnRegistryPort" variable.
     */
    @Override
    public Integer getSnRegistryPort() throws SnmpStatusException {
        return SnRegistryPort;
    }

    /**
     * Getter for the "SnHostname" variable.
     */
    @Override
    public String getSnHostname() throws SnmpStatusException {
        return SnHostname;
    }

    /**
     * Getter for the "SnCapacity" variable.
     */
    @Override
    public Integer getSnCapacity() throws SnmpStatusException {
        return SnCapacity;
    }

    /**
     * Getter for the "SnServiceStatus" variable.
     */
    @Override
    public EnumSnServiceStatus getSnServiceStatus() throws SnmpStatusException {
        return SnServiceStatus;
    }

    /**
     * Getter for the "SnLogFileLimit" variable.
     */
    @Override
    public Integer getSnLogFileLimit() throws SnmpStatusException {
        return SnLogFileLimit;
    }

    /**
     * Getter for the "SnLogFileCount" variable.
     */
    @Override
    public Integer getSnLogFileCount() throws SnmpStatusException {
        return SnLogFileCount;
    }

    /**
     * Getter for the "SnId" variable.
     */
    @Override
    public Integer getSnId() throws SnmpStatusException {
        return SnId;
    }

}
