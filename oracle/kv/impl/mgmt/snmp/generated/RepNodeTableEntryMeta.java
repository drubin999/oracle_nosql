package oracle.kv.impl.mgmt.snmp.generated;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling OracleNosqlMIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.*;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMibNode;
import com.sun.management.snmp.agent.SnmpMibEntry;
import com.sun.management.snmp.agent.*;

/**
 * The class is used for representing SNMP metadata for the "RepNodeTableEntry" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.111.42.3.2.1.
 */
@SuppressWarnings({"serial","unused"})
public class RepNodeTableEntryMeta extends SnmpMibEntry
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "RepNodeTableEntry".
     */
    public RepNodeTableEntryMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        varList = new int[64];
        varList[0] = 109;
        varList[1] = 108;
        varList[2] = 29;
        varList[3] = 107;
        varList[4] = 106;
        varList[5] = 28;
        varList[6] = 27;
        varList[7] = 105;
        varList[8] = 26;
        varList[9] = 104;
        varList[10] = 25;
        varList[11] = 103;
        varList[12] = 24;
        varList[13] = 102;
        varList[14] = 23;
        varList[15] = 101;
        varList[16] = 22;
        varList[17] = 100;
        varList[18] = 21;
        varList[19] = 20;
        varList[20] = 50;
        varList[21] = 9;
        varList[22] = 19;
        varList[23] = 8;
        varList[24] = 7;
        varList[25] = 18;
        varList[26] = 17;
        varList[27] = 49;
        varList[28] = 6;
        varList[29] = 48;
        varList[30] = 5;
        varList[31] = 16;
        varList[32] = 15;
        varList[33] = 4;
        varList[34] = 47;
        varList[35] = 14;
        varList[36] = 3;
        varList[37] = 46;
        varList[38] = 2;
        varList[39] = 13;
        varList[40] = 45;
        varList[41] = 1;
        varList[42] = 12;
        varList[43] = 44;
        varList[44] = 11;
        varList[45] = 43;
        varList[46] = 42;
        varList[47] = 10;
        varList[48] = 41;
        varList[49] = 40;
        varList[50] = 39;
        varList[51] = 38;
        varList[52] = 37;
        varList[53] = 36;
        varList[54] = 35;
        varList[55] = 113;
        varList[56] = 34;
        varList[57] = 112;
        varList[58] = 33;
        varList[59] = 111;
        varList[60] = 110;
        varList[61] = 32;
        varList[62] = 31;
        varList[63] = 30;
        SnmpMibNode.sort(varList);
    }

    /**
     * Get the value of a scalar variable
     */
    @Override
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 109:
                return new SnmpInt(node.getRepNodeLatencyCeiling());

            case 108:
                return new SnmpString(node.getRepNodeMountPoint());

            case 29:
                return new SnmpInt(node.getRepNodeMultiIntervalPeriod());

            case 107:
                return new SnmpInt(node.getRepNodeHeapSize());

            case 106:
                return new SnmpString(node.getRepNodeLoggingConfigProps());

            case 28:
                return new SnmpString(node.getRepNodeMultiIntervalEnd());

            case 27:
                return new SnmpString(node.getRepNodeMultiIntervalStart());

            case 105:
                return new SnmpString(node.getRepNodeJavaMiscParams());

            case 26:
                return new SnmpInt(node.getRepNodeCumulativePct99());

            case 104:
                return new SnmpInt(node.getRepNodeMaxTrackedLatency());

            case 25:
                return new SnmpInt(node.getRepNodeCumulativePct95());

            case 103:
                return new SnmpInt(node.getRepNodeStatsInterval());

            case 24:
                return new SnmpInt(node.getRepNodeCumulativeLatAvgFrac());

            case 102:
                return new SnmpInt(node.getRepNodeCollectEnvStats());

            case 23:
                return new SnmpInt(node.getRepNodeCumulativeLatAvgInt());

            case 101:
                return new SnmpString(node.getRepNodeConfigProperties());

            case 22:
                return new SnmpString(node.getRepNodeCumulativeLatAvg());

            case 100:
                return new SnmpInt(node.getRepNodeCacheSize());

            case 21:
                return new SnmpInt(node.getRepNodeCumulativeLatMax());

            case 20:
                return new SnmpInt(node.getRepNodeCumulativeLatMin());

            case 50:
                return new SnmpGauge(node.getRepNodeCommitLag());

            case 9:
                return new SnmpInt(node.getRepNodeIntervalLatMin());

            case 19:
                return new SnmpGauge(node.getRepNodeCumulativeThroughput());

            case 8:
                return new SnmpGauge(node.getRepNodeIntervalThroughput());

            case 7:
                return new SnmpInt(node.getRepNodeIntervalTotalOps());

            case 18:
                return new SnmpInt(node.getRepNodeCumulativeTotalOps());

            case 17:
                return new SnmpString(node.getRepNodeCumulativeEnd());

            case 49:
                return new SnmpInt(node.getRepNodeMultiCumulativePct99());

            case 6:
                return new SnmpInt(node.getRepNodeIntervalPeriod());

            case 48:
                return new SnmpInt(node.getRepNodeMultiCumulativePct95());

            case 5:
                return new SnmpString(node.getRepNodeIntervalEnd());

            case 16:
                return new SnmpString(node.getRepNodeCumulativeStart());

            case 15:
                return new SnmpInt(node.getRepNodeIntervalPct99());

            case 4:
                return new SnmpString(node.getRepNodeIntervalStart());

            case 47:
                return new SnmpInt(node.getRepNodeMultiCumulativeLatAvgFrac());

            case 14:
                return new SnmpInt(node.getRepNodeIntervalPct95());

            case 3:
                return new SnmpInt(node.getRepNodeServiceStatus());

            case 46:
                return new SnmpInt(node.getRepNodeMultiCumulativeLatAvgInt());

            case 2:
                return new SnmpInt(node.getRepNodeNumber());

            case 13:
                return new SnmpInt(node.getRepNodeIntervalLatAvgFrac());

            case 45:
                return new SnmpString(node.getRepNodeMultiCumulativeLatAvg());

            case 1:
                return new SnmpInt(node.getRepNodeShardNumber());

            case 12:
                return new SnmpInt(node.getRepNodeIntervalLatAvgInt());

            case 44:
                return new SnmpInt(node.getRepNodeMultiCumulativeLatMax());

            case 11:
                return new SnmpString(node.getRepNodeIntervalLatAvg());

            case 43:
                return new SnmpInt(node.getRepNodeMultiCumulativeLatMin());

            case 42:
                return new SnmpGauge(node.getRepNodeMultiCumulativeThroughput());

            case 10:
                return new SnmpInt(node.getRepNodeIntervalLatMax());

            case 41:
                return new SnmpInt(node.getRepNodeMultiCumulativeTotalOps());

            case 40:
                return new SnmpString(node.getRepNodeMultiCumulativeEnd());

            case 39:
                return new SnmpString(node.getRepNodeMultiCumulativeStart());

            case 38:
                return new SnmpInt(node.getRepNodeMultiIntervalPct99());

            case 37:
                return new SnmpInt(node.getRepNodeMultiIntervalPct95());

            case 36:
                return new SnmpInt(node.getRepNodeMultiIntervalLatAvgFrac());

            case 35:
                return new SnmpInt(node.getRepNodeMultiIntervalLatAvgInt());

            case 113:
                return new SnmpGauge(node.getRepNodeCommitLagThreshold());

            case 34:
                return new SnmpString(node.getRepNodeMultiIntervalLatAvg());

            case 112:
                return new SnmpInt(node.getRepNodeMultiCumulativeTotalRequests());

            case 33:
                return new SnmpInt(node.getRepNodeMultiIntervalLatMax());

            case 111:
                return new SnmpInt(node.getRepNodeMultiIntervalTotalRequests());

            case 110:
                return new SnmpInt(node.getRepNodeThroughputFloor());

            case 32:
                return new SnmpInt(node.getRepNodeMultiIntervalLatMin());

            case 31:
                return new SnmpGauge(node.getRepNodeMultiIntervalThroughput());

            case 30:
                return new SnmpInt(node.getRepNodeMultiIntervalTotalOps());

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    @Override
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 109:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 108:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 29:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 107:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 106:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 28:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 105:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 104:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 103:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 102:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 101:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 100:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 20:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 50:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 49:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 48:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 47:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 46:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 45:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 44:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 43:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 42:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 41:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 40:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 39:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 38:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 37:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 36:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 35:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 113:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 34:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 112:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 33:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 111:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 110:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 32:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 31:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 30:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    @Override
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 109:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 108:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 29:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 107:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 106:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 28:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 105:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 104:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 103:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 102:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 101:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 100:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 20:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 50:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 49:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 48:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 47:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 46:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 45:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 44:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 43:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 42:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 41:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 40:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 39:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 38:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 37:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 36:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 35:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 113:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 34:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 112:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 33:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 111:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 110:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 32:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 31:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 30:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(RepNodeTableEntryMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    @Override
    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    @Override
    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    @Override
    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    @Override
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 109:
            case 108:
            case 29:
            case 107:
            case 106:
            case 28:
            case 27:
            case 105:
            case 26:
            case 104:
            case 25:
            case 103:
            case 24:
            case 102:
            case 23:
            case 101:
            case 22:
            case 100:
            case 21:
            case 20:
            case 50:
            case 9:
            case 19:
            case 8:
            case 7:
            case 18:
            case 17:
            case 49:
            case 6:
            case 48:
            case 5:
            case 16:
            case 15:
            case 4:
            case 47:
            case 14:
            case 3:
            case 46:
            case 2:
            case 13:
            case 45:
            case 1:
            case 12:
            case 44:
            case 11:
            case 43:
            case 42:
            case 10:
            case 41:
            case 40:
            case 39:
            case 38:
            case 37:
            case 36:
            case 35:
            case 113:
            case 34:
            case 112:
            case 33:
            case 111:
            case 110:
            case 32:
            case 31:
            case 30:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
@Override
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 109:
            case 108:
            case 29:
            case 107:
            case 106:
            case 28:
            case 27:
            case 105:
            case 26:
            case 104:
            case 25:
            case 103:
            case 24:
            case 102:
            case 23:
            case 101:
            case 22:
            case 100:
            case 21:
            case 20:
            case 50:
            case 9:
            case 19:
            case 8:
            case 7:
            case 18:
            case 17:
            case 49:
            case 6:
            case 48:
            case 5:
            case 16:
            case 15:
            case 4:
            case 47:
            case 14:
            case 3:
            case 46:
            case 2:
            case 13:
            case 45:
            case 1:
            case 12:
            case 44:
            case 11:
            case 43:
            case 42:
            case 10:
            case 41:
            case 40:
            case 39:
            case 38:
            case 37:
            case 36:
            case 35:
            case 113:
            case 34:
            case 112:
            case 33:
            case 111:
            case 110:
            case 32:
            case 31:
            case 30:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    @Override
    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 109:
                return "RepNodeLatencyCeiling";

            case 108:
                return "RepNodeMountPoint";

            case 29:
                return "RepNodeMultiIntervalPeriod";

            case 107:
                return "RepNodeHeapSize";

            case 106:
                return "RepNodeLoggingConfigProps";

            case 28:
                return "RepNodeMultiIntervalEnd";

            case 27:
                return "RepNodeMultiIntervalStart";

            case 105:
                return "RepNodeJavaMiscParams";

            case 26:
                return "RepNodeCumulativePct99";

            case 104:
                return "RepNodeMaxTrackedLatency";

            case 25:
                return "RepNodeCumulativePct95";

            case 103:
                return "RepNodeStatsInterval";

            case 24:
                return "RepNodeCumulativeLatAvgFrac";

            case 102:
                return "RepNodeCollectEnvStats";

            case 23:
                return "RepNodeCumulativeLatAvgInt";

            case 101:
                return "RepNodeConfigProperties";

            case 22:
                return "RepNodeCumulativeLatAvg";

            case 100:
                return "RepNodeCacheSize";

            case 21:
                return "RepNodeCumulativeLatMax";

            case 20:
                return "RepNodeCumulativeLatMin";

            case 50:
                return "RepNodeCommitLag";

            case 9:
                return "RepNodeIntervalLatMin";

            case 19:
                return "RepNodeCumulativeThroughput";

            case 8:
                return "RepNodeIntervalThroughput";

            case 7:
                return "RepNodeIntervalTotalOps";

            case 18:
                return "RepNodeCumulativeTotalOps";

            case 17:
                return "RepNodeCumulativeEnd";

            case 49:
                return "RepNodeMultiCumulativePct99";

            case 6:
                return "RepNodeIntervalPeriod";

            case 48:
                return "RepNodeMultiCumulativePct95";

            case 5:
                return "RepNodeIntervalEnd";

            case 16:
                return "RepNodeCumulativeStart";

            case 15:
                return "RepNodeIntervalPct99";

            case 4:
                return "RepNodeIntervalStart";

            case 47:
                return "RepNodeMultiCumulativeLatAvgFrac";

            case 14:
                return "RepNodeIntervalPct95";

            case 3:
                return "RepNodeServiceStatus";

            case 46:
                return "RepNodeMultiCumulativeLatAvgInt";

            case 2:
                return "RepNodeNumber";

            case 13:
                return "RepNodeIntervalLatAvgFrac";

            case 45:
                return "RepNodeMultiCumulativeLatAvg";

            case 1:
                return "RepNodeShardNumber";

            case 12:
                return "RepNodeIntervalLatAvgInt";

            case 44:
                return "RepNodeMultiCumulativeLatMax";

            case 11:
                return "RepNodeIntervalLatAvg";

            case 43:
                return "RepNodeMultiCumulativeLatMin";

            case 42:
                return "RepNodeMultiCumulativeThroughput";

            case 10:
                return "RepNodeIntervalLatMax";

            case 41:
                return "RepNodeMultiCumulativeTotalOps";

            case 40:
                return "RepNodeMultiCumulativeEnd";

            case 39:
                return "RepNodeMultiCumulativeStart";

            case 38:
                return "RepNodeMultiIntervalPct99";

            case 37:
                return "RepNodeMultiIntervalPct95";

            case 36:
                return "RepNodeMultiIntervalLatAvgFrac";

            case 35:
                return "RepNodeMultiIntervalLatAvgInt";

            case 113:
                return "RepNodeCommitLagThreshold";

            case 34:
                return "RepNodeMultiIntervalLatAvg";

            case 112:
                return "RepNodeMultiCumulativeTotalRequests";

            case 33:
                return "RepNodeMultiIntervalLatMax";

            case 111:
                return "RepNodeMultiIntervalTotalRequests";

            case 110:
                return "RepNodeThroughputFloor";

            case 32:
                return "RepNodeMultiIntervalLatMin";

            case 31:
                return "RepNodeMultiIntervalThroughput";

            case 30:
                return "RepNodeMultiIntervalTotalOps";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    protected RepNodeTableEntryMBean node;
    protected SnmpStandardObjectServer objectserver = null;
}
